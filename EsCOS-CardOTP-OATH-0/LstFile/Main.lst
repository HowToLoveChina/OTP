C51 COMPILER V9.01   MAIN                                                                  11/23/2016 11:58:14 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\ObjFile\Main.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE SrcFile\StartUp\Main.c LARGE BROWSE INCDIR(.\SrcFile\StartUp\CPU;.\SrcFile\
                    -Frame\Inc;.\SrcFile\Func\Inc;.\SrcFile\Lib;.\SrcFile\App\Inc) DEFINE(_DEV_BOARD_,_FPGA_DEMO_EN_) DEBUG OBJECTEXTEND PRIN
                    -T(.\LstFile\Main.lst) OBJECT(.\ObjFile\Main.obj)

line level    source

   1          #include "REG_Z8D16R_2.h"
   2          #include "Debug.h"
   3          #include "CRC.H"
   4          #include "CMDPROC.h"
   5          #include "TbcFunc.h"
   6          #include "TimerFunc.h" 
   7          #include "ScuFunc.h" 
   8          #include "IomFunc.h" 
   9          #include "IomFrame.h" 
  10          #include "TokenApp.h"
  11          #include "OtpFunc.h"  
  12          #include "UARTFRAME.H"
  13          //#include "LCDFUNC.H"
  14          #include "uc8118.h"
  15          #include "string.H"
  16          #include "OTPFRAME.H"
  17          #include "ADCFUNC.H" 
  18          #include "intrins.H"
  19          #include "TBCFRAME.H" 
  20          #include "ADCFRAME.H" 
  21          #include "Debug.h"  
  22          #include "SM4.h"
  23          #include "typedefine.h"
  24          //#include "SM3.h"
  25          #include "SM4Process.h"
  26          #include "OTPFUNC.h"
  27          #include "WDTFUNC.H"
  28          #include "SecFunc.h"
  29          #include "Hmac.h"
  30          //SM3Context SM3Block;
  31          
  32          //extern void vOTP_Ewatch(void);
  33          
  34          UINT8 idata _FIRST_POWERON_FLAG_ _at_ 0xb0;
  35          
  36          void EnterStandby(void)                         //120s进入standby
  37          {
  38   1              vScu_SetSuspendOT_120S();
  39   1              vScu_SuspendOT_ResultStandby();
  40   1              vScu_SuspendOTEn();
  41   1              vScu_SuspendModeEn();
  42   1      }
  43          
  44          void vSysInit(void)
  45          {   
  46   1              //UINT8 Key;
  47   1              #if 1
  48   1              vScu_SetSysClk32K(); 
  49   1              
  50   1              SCULCDSWEN|=SCUOXDETEN; 
  51   1      
  52   1              //vScu_PowerIo_ResultInterrupt();
  53   1              vScu_PowerIo_ResultStandby();
C51 COMPILER V9.01   MAIN                                                                  11/23/2016 11:58:14 PAGE 2   

  54   1              if(gsuperpw == 0)
  55   1              {
  56   2                      gsuperpw = 1;
  57   2                      vScu_StandbyModeEn();
  58   2              }
  59   1              
  60   1      //      vLcdInit(LCD_BIAS_1O3,LCD_DUTY_1O4,LCD_FRM_102HZ);
  61   1              ElcPaper_Init();
  62   1              vScu_SetSysClkOsc2M();
  63   1      //      vLcd_All_Clear2();
  64   1              Paper_All_Clear();
  65   1              vScu_SetSysClk32K(); 
  66   1                      
  67   1              vTbcInit();     
  68   1              
  69   1              //vUartInit();  
  70   1      
  71   1              //vKeboardInit();
  72   1      
  73   1              vScu_IomClkEn();
  74   1               vScu_GpioWakeupEn();
  75   1               vScu_GpioIntEn();
  76   1               ES=1;
  77   1               EA=1;
  78   1      
  79   1              
  80   1          
  81   1          //定时唤醒，频率补偿
  82   1          #if 1
  83   1              if(SCUIS1&0x08)
  84   1              {
  85   2                  SCUIS1|=0x08;        //清中断状态位   
  86   2                  vScu_SetSysClkOsc2M();
  87   2                 // vLcd_SetStopMode();      
  88   2      
  89   2              if(WT_TenMin_Flag == 1)                 //一分钟唤醒标志位
  90   2              {
  91   3                  if(WT_TenMin_Couter >= WakeUp_MIN)          //十分钟补偿一次
  92   3                  {
  93   4                      WT_TenMin_Couter = 0;
  94   4                      vFreqAdj(1);
  95   4                  }
  96   3                  else
  97   3                  {
  98   4                      WT_TenMin_Couter++;
  99   4                      vScu_SetSysClk32K(); 
 100   4                      vScu_WakeUpTimerWakeUp_1Min();          
 101   4                  }
 102   3              }
 103   2              else if(WT_Onehour_Flag == 1)           //一小时唤醒标志位，一小时补偿一次
 104   2              {
 105   3                  vFreqAdj(1);
 106   3              }   
 107   2      
 108   2              //vDelay1ms(100);                     //延时100毫秒，便于打印信息
 109   2              vScu_SetSysClk32K(); 
 110   2              vScu_StandbyModeEn();
 111   2              }
 112   1          #endif   
 113   1      
 114   1              #if 0
                      #if(!DEBUG)
C51 COMPILER V9.01   MAIN                                                                  11/23/2016 11:58:14 PAGE 3   

                      vScu_SetSysClkOsc2M();
                      if(ucPowerDetect())//低电压
                      {       
                              u1LowPowerFlag = 1;
                      }
                      vScu_SetSysClk32K(); 
                      //功耗控制部分
                      //关闭BG使能
                      vAdcBgDis();
                      
                      //LDO TRIM 到2.05V
                      ANALOGCTRLTRIMR1=0x00;
                      //PDR 关闭低电压检测
                      vScu_PdrDis();  
                      #endif
                      #endif
 132   1              
 133   1              #if(YJZX)
                      vScu_SecIntEn();
                      vSec_XramErrInt_En();
                      vSec_IramErrInt_En();
                      vSec_IpEalErrInt_En();
                      vSec_OtpcPatternErrInt_En();
                      #endif
 140   1              #endif
 141   1              
 142   1      } 
 143          
 144          void Main(void)
 145          {    
 146   1              u1 u1CHeckStatus = 0;
 147   1              //u1 pu1MacKey[6] = {0x01,0x02,0x03,0x04,0x05,0x06};
 148   1              //u1 pu1MacKeyBuf[20];
 149   1              //u2 u2Outlen;
 150   1              //u2 u2MacKeyLen = 6;
 151   1              
 152   1              vSysInit();
 153   1              
 154   1              
 155   1              u1FirstSetFlag = 0;
 156   1      
 157   1              if((OTPSTATUS_MACKEY==gUseCase)||(OTPSTATUS_SN_TIME==gUseCase))    
 158   1              {
 159   2                      gUseCase = OTPSTATUS_SN_TIME;
 160   2              }
 161   1              else if((OTPSTATUS_HARDWARE==gUseCase)||(OTPSTATUS_PARACHECK==gUseCase))
 162   1              {
 163   2                      gUseCase = OTPSTATUS_CALIB;
 164   2              }
 165   1              #if 0
                      if((OTPSTATUS_TIMETOKEN==gUseCase)||(OTPSTATUS_PAY==gUseCase)||(OTPSTATUS_SELECTMODE==gUseCase))
                      {
                              gUseCase = OTPSTATUS_PWVERIFY;
                      }
                      else if(OTPSTATUS_UNLOCK==gUseCase) //增加自动解锁判断
                      {           
                              if(g_AutoUnlockCnt < AUTO_UNLOCK_LIMITED)
                              {
                                      if(Base_Time() - gPinErr_Time > AUTO_UNLOCK_TIME)
                                      {
                                              g_AutoUnlockCnt++;
                                              gPinErr_Count   =0x00;
C51 COMPILER V9.01   MAIN                                                                  11/23/2016 11:58:14 PAGE 4   

                                              gUseCase = OTPSTATUS_PWVERIFY;
                                      }
                              }
                      }
                      else if((OTPSTATUS_MACKEY==gUseCase)||(OTPSTATUS_SN_TIME==gUseCase))    
                      {
                              gUseCase = OTPSTATUS_SN_TIME;
                      }
              
                      if(g_ModfyPwFlag == 1)                                  
                      {
                              g_ModfyPwFlag = 0;
                              if(OTPSTATUS_PWSET==gUseCase)
                              {
                                      gUseCase = OTPSTATUS_PWVERIFY;
                              }
                      }
                      #endif
 196   1      
 197   1              #if 0
                      vScu_SetSysClkOsc2M();
                      u1CHeckStatus =  SM4DEC_TEST();                 //SM4ENC_TEST();                        //任何一个算法模块自检失败，都会使设备失效，进入失效
             -状态
                      if(u1CHeckStatus == 0xff)
                      {
                              gUseCase = OTPSTATUS_INVALID;
                      }
              
                      
                      if(u1CHeckStatus == 0)                                  //如果前面的自检错误了，就没有必要再进行下面的自检了，也避免前面自检错误，后面
             -自检正确的情况
                      {
                              u1CHeckStatus = SHA1_TEST();    
                              if(u1CHeckStatus == 0xff)
                              {
                                      gUseCase = OTPSTATUS_INVALID;
                              }
                      }
                      vScu_SetSysClk32K(); 
                      #endif
 216   1              #if 0
                      if(u1CHeckStatus == 0)
                      {
                              u1CHeckStatus = SM3_TEST();
                              if(u1CHeckStatus == 0xff)
                              {
                                      gUseCase = OTPSTATUS_INVALID;
                              }
                      }
                      
                      #endif
 227   1              
 228   1      
 229   1              //#if(!DEBUG)
 230   1              //if((SCULCDSWEN&SCUPOWERIOSTS))
 231   1              //{     
 232   1                      //vLcd_All_Clear2();
 233   1              //      vScu_PowerIo_ResultStandby();
 234   1              //      vScu_StandbyModeEn();   
 235   1              //}
 236   1              //#endif
 237   1      
C51 COMPILER V9.01   MAIN                                                                  11/23/2016 11:58:14 PAGE 5   

 238   1              //vScu_PowerIo_ResultStandby();
 239   1      
 240   1              //vLcdInit(LCD_BIAS_1O3,LCD_DUTY_1O4,LCD_FRM_102HZ);
 241   1              //vScu_SetSysClkOsc2M();
 242   1              //vLcd_All_Clear2();
 243   1              //vScu_SetSysClk32K(); 
 244   1              
 245   1              
 246   1              if((gUseCase>6))        //激活后打开看门狗
 247   1              {
 248   2                      vWdtInit(WDT_8S);                       //打开看门狗
 249   2              }
 250   1              
 251   1              //#if(DEBUG)
 252   1              //gUseCase = OTPSTATUS_CALIB;           //test0406
 253   1              //#endif
 254   1              
 255   1              while(1)
 256   1              {
 257   2                      #if 1
 258   2                      //Key_Input = ucGetKeyValue();          
 259   2                      //if(0x3B==Key_Input)
 260   2                      {    
 261   3                              //判断是按下开机键              
 262   3                              switch(gUseCase)
 263   3                              {
 264   4                                      case OTPSTATUS_HARDWARE:               //按键检测
 265   4                                      case OTPSTATUS_PARACHECK:
 266   4                                      case OTPSTATUS_CALIB: 
 267   4                                      case OTPSTATUS_SN_TIME:                    //SN_时间输入
 268   4                                      case OTPSTATUS_MACKEY:                  
 269   4                                              //vOTP_InputMacKey_SeedKey();
 270   4                                              //break;
 271   4                                      //case OTPSTATUS_PARACHECK:                     
 272   4                                      //      vOTP_InputHardware_Check();
 273   4                                      //      break;
 274   4                                      case OTPSTATUS_CRCSNTIME:
 275   4                                          //vOTP_CRC_SN_TIME();
 276   4                                          vOTP_InitProcess();
 277   4                                          break;
 278   4                                      case OTPSTATUS_TIMETOKEN:         
 279   4                                          VOTP_TimeToken();   
 280   4                                              break;
 281   4                                      #if 0
                                              case OTPSTATUS_ACTIVATE:                        //激活流程
                                                      vOTP_ActiveProcess();
                                                      break;
                                              case OTPSTATUS_PWSET:
                                                      vOTP_SetPinProcess();
                                                      break;
                                              case OTPSTATUS_PWVERIFY:                        
                                                      vOTP_InputPinProcess();
                                                      break;
                                              case OTPSTATUS_SELECTMODE:                      
                                                      vOTP_RunModeProcess();  
                                                      break;
                                              
                                              case OTPSTATUS_PAY:
                                                  vOTP_PAYProcess();
                                                  break;
                                              case OTPSTATUS_UNLOCK:
                                                      vOTP_UnlockPinProcess();                //手动解除锁定
C51 COMPILER V9.01   MAIN                                                                  11/23/2016 11:58:14 PAGE 6   

                                                      break;
                                                      #endif
 302   4                                      case OTPSTATUS_INVALID:
 303   4                                              vOTP_InvalidProcess();
 304   4                                              break;
 305   4                                      
 306   4                                      default:
 307   4                                          break;                                      
 308   4                               }
 309   3                      }
 310   2                      #endif
 311   2              }
 312   1      }
 313          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    345    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       1
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
