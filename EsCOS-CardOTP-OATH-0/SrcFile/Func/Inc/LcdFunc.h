#ifndef _LCDFUNC_H_
#define _LCDFUNC_H_
#include "REG_Z8D16R_2.h"
//REG :  LCDDSPMOD
#define vLcd_SetStopMode()     {LCDDSPMOD=0x00;}
#define vLcd_SetAllOffMode()   {LCDDSPMOD=0x01;}
#define vLcd_SetDisplayMode()  {LCDDSPMOD=0x02;}
#define vLcd_SetAllOnMode()    {LCDDSPMOD=0x03;}


#define BIASSEL                (1<<6)
#define LCD_BIAS_1O2           (0<<6)
#define LCD_BIAS_1O3           (1<<6)
#define vLcd_SetBias_1O3()     {LCDCR|=BIASSEL;}
#define vLcd_SetBias_1O2()     {LCDCR&=0xbf;}

#define DUTY_MASK              (0xC7)
#define LCD_DUTY_1O2           (1<<3)
#define LCD_DUTY_1O3           (2<<3)
#define LCD_DUTY_1O4           (3<<3)
#define LCD_DUTY_1O5           (4<<3)

#define FRM_MASK               (0xF9)
#define LCD_FRM_64HZ           (0<<1)
#define LCD_FRM_74HZ           (1<<1)
#define LCD_FRM_85HZ           (2<<1)
#define LCD_FRM_102HZ          (3<<1)
#define vLcd_SetFrm_64HZ()     {LCDCR&=0xF9;}


#define LCD_EN                 (1<<0)
#define vLcd_BiasOn()          {LCDCR|=LCD_EN;}
#define vLcd_BiasDis()         {LCDCR&=(~LCD_EN);}

#define DEBUG		0
#define YJZX			0
#define GMT			0

#ifdef 	_LCDFUNC_C_	
#define  _RIGHT_DISP_


//对应字符的码表  {fged,abcp}
//code UINT8 Num[26][2] = 
//{
//{0x1a,0x0e},		//0
//{0x00,0x0c},		//1
//{0x1c,0x06},		//2
//{0x14,0x0e},		//3
//{0x06,0x0c},		//4
//{0x16,0x0a},		//5
//{0x1e,0x0a},		//6
//{0x00,0x0e},		//7
//{0x1e,0x0e},		//8
//{0x16,0x0e},		//9
//{0xe, 0x0e},		//A
//{0x1e,0x08},		//b
//{0x1a,0x02},		//c
//{0x1c,0x0c},		//d
//{0x1e,0x02},		//e
//{0x0e,0x02},		//f
//{0x0e,0x0c},		//H
//{0x0e,0x08},		//h
//{0x1a,0x00},		//L
//{0x0c,0x08},		//n
//{0x1c,0x08},		//o
//{0x0e,0x06},		//P
//{0x0c,0x00},		//r
//{0x18,0x08},		//u
//{0x04,0x00},		//-
//{0x10,0x00},		//_
//};
//仿真器对应字符的码表  {degf,pcba}
#if 0
code UINT8 Num[27][2] = 
{
{0x0e,0x0b},		//0		//{0x0b,0x0e},
{0x06,0x00},		// 1		//{0x00,0x06},	
{0x0c,0x07},		//2
{0x0e,0x05},		//3
{0x06,0x0c},		//4
{0x0a,0x0d},		//5
{0x0a,0x0f},		//6
{0x0e,0x00},		//7
{0x0e,0x0f},		//8
{0x0e,0x0d},		//9
{0x0e,0x0e},		//A
{0x02,0x0f},		//b
{0x00,0x07},		//c
{0x06,0x07},		//d
{0x08,0x0f},		//e
{0x08,0x0e},		//f
{0x06,0x0e},		//H
{0x02,0x0e},		//h
{0x00,0x0b},		//L
{0x02,0x06},		//n
{0x02,0x07},		//o
{0x0c,0x0e},		//P
{0x00,0x06},		//r
{0x02,0x03},		//u
{0x00,0x04},		//-
{0x00,0x01},		//_
{0x00,0x00},
};
#endif
#if 0
code UINT8 Num[27][2] = 
{
{0x07,0x0d},		//0
{0x06,0x00},		//1
{0x03,0x0e},		//2
{0x07,0x0a},		//3
{0x06,0x03},		//4
{0x05,0x0b},		//5
{0x05,0x0f},		//6
{0x07,0x00},		//7
{0x07,0x0f},		//8
{0x07,0x0b},		//9
{0x07,0x07},		//A
{0x04,0x0f},		//b
{0x00,0x0e},		//c
{0x06,0x0e},		//d
{0x01,0x0f},		//e
{0x01,0x07},		//f
{0x06,0x07},		//H
{0x04,0x07},		//h
{0x00,0x0d},		//L
{0x04,0x06},		//n
{0x04,0x0e},		//o
{0x03,0x07},		//P
{0x00,0x06},		//r
{0x04,0x0c},		//u
{0x00,0x02},		//-
{0x00,0x08},		//_
{0x00,0x00},		//.
};
#endif
#if 0
//OT3屏对应字符的码表 {degf,pcba}
code UINT8 Num[27][2] = 
{
{0x0d,0x07},		//0
{0x00,0x06},		//1
{0x0e,0x03},		//2
{0x0a,0x07},		//3
{0x03,0x06},		//4
{0x0b,0x05},		//5
{0x0f,0x05},		//6
{0x00,0x07},		//7
{0x0f,0x07},		//8
{0x0b,0x07},		//9
{0x07,0x07},		//A
{0x0f,0x04},		//b
{0x0e,0x00},		//c
{0x0e,0x06},		//d
{0x0f,0x01},		//e
{0x07,0x01},		//f
{0x07,0x06},		//H
{0x07,0x04},		//h
{0x0d,0x00},		//L
{0x05,0x07},		//n{0x06,0x04},
{0x0e,0x04},		//o
{0x07,0x03},		//P		{0x07,0x03},		//P
{0x06,0x00},		//r
{0x0c,0x04},		//u
{0x02,0x00},		//-
{0x08,0x00},		//_
{0x00,0x00},
};
#endif
//卡片OTP对应字符码表
code UINT8 Num1[21][4] = 					//整开始
{
{0x09,0x01,0x08,0x0a},		//0
{0x00,0x00,0x00,0x0a},		// 1
{0x0c,0x01,0x0a,0x02},		// 2
{0x04,0x01,0x0a,0x0a},		// 	3
{0x05,0x00,0x02,0x0a},		// 4
{0x05,0x01,0x0a,0x08},		//5
{0x0d,0x01,0x0a,0x08},		//6
{0x00,0x01,0x00,0x0a},		//7
{0x0d,0x01,0x0a,0x0a},		//8
{0x05,0x01,0x0a,0x0a},		//9
{0x0d,0x01,0x02,0x02}	,	//P
{0x0c,0x00,0x02,0x08}	,		//n
{0x0c,0x00,0x0a,0x08}	,		//o
{0x04,0x00,0x02,0x00}	,		//-
{0x00,0x00,0x08,0x00}	,		//_
{0x0D,0x01,0x0a,0x00}	,		//E
{0x0c,0x00,0x02,0x00}	,		//r
{0x09,0x00,0x08,0x00}	,		//L
{0x0c,0x00,0x0a,0x00}	,		//c
{0x00,0x06,0x05,0x00}	,		//K	
{0x00,0x00,0x00,0x00}			//k
#if 0
{0x0f,0x04},		//b
{0x0e,0x00},		//c
{0x0e,0x06},		//d
{0x0f,0x01},		//e
{0x07,0x01},		//f
{0x07,0x06},		//H
{0x07,0x04},		//h
{0x0d,0x00},		//L
{0x05,0x07},		//n{0x06,0x04},
{0x0e,0x04},		//o
{0x07,0x03},		//P		{0x07,0x03},		//P
{0x06,0x00},		//r
{0x0c,0x04},		//u
{0x02,0x00},		//-
{0x08,0x00},		//_
{0x00,0x00},
#endif
};

code UINT8 Num2[21][4] = 				//半开始
{
{0x05,0x01,0x08,0x09},		//0
{0x00,0x00,0x00,0x09},		// 1
{0x04,0x05,0x08,0x03},		// 2
{0x00,0x05,0x08,0x0b},		// 3
{0x01,0x04,0x00,0x0b},		// 4
{0x01,0x05,0x08,0x0a},		//5
{0x05,0x05,0x08,0x0a},		//6
{0x00,0x01,0x00,0x09},		//7
{0x05,0x05,0x08,0x0b},		//8
{0x01,0x05,0x08,0x0b},		//9
{0x05,0x05,0x00,0x03},		//P
{0x04,0x04,0x00,0x0a},		//n
{0x04,0x04,0x08,0x0a}	,	//o
{0x00,0x04,0x00,0x02}	,		//-
{0x00,0x00,0x08,0x00}	,		//_
{0x05,0x05,0x08,0x02}	,		//E
{0x04,0x04,0x00,0x02}	,		//r
{0x05,0x00,0x08,0x00}	,		//L
{0x04,0x04,0x08,0x02}	,		//c
{0x00,0x00,0x07,0x04}	,		//K
{0x00,0x00,0x00,0x00}			//k
#if 0
{0x0f,0x04},		//b
{0x0e,0x00},		//c
{0x0e,0x06},		//d
{0x0f,0x01},		//e
{0x07,0x01},		//f
{0x07,0x06},		//H
{0x07,0x04},		//h
{0x0d,0x00},		//L
{0x05,0x07},		//n{0x06,0x04},
{0x0e,0x04},		//o
{0x07,0x03},		//P		{0x07,0x03},		//P
{0x06,0x00},		//r
{0x0c,0x04},		//u
{0x02,0x00},		//-
{0x08,0x00},		//_
{0x00,0x00},
#endif
};
//code UINT8 Flag[16][2]=
//{
//	{3,2},		//屏幕左移 L1标记
//	{3,4},		//电池电量  L2标记
//	{3,8},		//屏幕左移 L3标记
//	{3,0x10},	//密码  L4标记
//	{4,2},		//新 H4标记
//	{4,4},		//信息  H3标记
//	{4,8},		//锁  H2标记
//	{4,0x10},	//激活 H1标记
//    {5,2},		// K1标记
//    {5,4},		// 开机 H5标记
//    {5,8},		//成功 H6标记
//    {5,0x10},	//错误H7标记
//    {6,2},		// K2标记
//    {6,4},		// K3标记
//    {6,8},		// K4标记
//    {6,0x10},	// K5标记
//};
#if 0
//仿真器对应FLAG字符的码表 
code UINT8  Flag[16][2]=
{
	{1,0x01},		//屏幕左移 L1标记
	{1,0x02},		//电池电量  L2标记
	{1,0x04},		//屏幕左移 L3标记
	{1,0x08},	    //密码  L4标记
	
	{2,0x01},		//新 H4标记
	{2,0x02},		//信息  H3标记
	{2,0x04},		//锁  H2标记
	{2,0x08},	    //激活 H1标记
	
    {3,0x01},		// K1标记
    {3,0x02},		// 开机 H5标记
    {3,0x04},		//成功 H6标记
    {3,0x08},	    //错误H7标记
    {4,0x01},		// K2标记
    {4,0x02},		// K3标记
    {4,0x04},		// K4标记
    {4,0x08},	    // K5标记
};
#endif
#if 0
code UINT8  Flag[16][2]=
{
	{0,0x01},		//第五格电量 K1
	{0,0x02},		//屏幕右移 H11
	{0,0x04},		//失败	H10
	{0,0x08},	    //成功	H9
	{1,0x01},		//信息	H5
	{1,0x02},		//新		H6
	{1,0x04},		//开机	H7
	{1,0x08},	    //密码	H8
    {2,0x01},		// 锁	H4
    {2,0x02},		// 激活	H3
    {2,0x04},		//电池电量	H2
    {2,0x08},	    //屏幕左移	H1
    {3,0x01},		// 第四格电量 K2标记
    {3,0x02},		// 第三格电量 K3标记
    {3,0x04},		// 第二格电量 K4标记
    {3,0x08},	    //第一格电量  K5标记
};
#endif
//code UINT8 Num_Assic[26] = {'0','1','2','3','4','5','6','7','8','9','A','b','C','d','E','F','H','h','L','n','o','P','r','u','-','_'};
//code UINT8 Num_Assic[27] = {'0','1','2','3','4','5','6','7','8','9','A','b','C','d','E','F','H','h','L','n','o','P','r','u','-','_','k'};		//'.'};
code UINT8 Num_Assic1[21] = {'0','1','2','3','4','5','6','7','8','9','P','n','o','-','_','E','r','L','c','K','k'};	

//Function 
void vDelay1ms(UINT8 Count);
void vLcdInit(UINT8 BIAS,UINT8 DUTY,UINT8 FRM);
//void vLcd_Set_All(void);
//void vLcd_Clear_All(void);
//void vLcd_String_Clear(void);
//void vLcd_Bcd_Shift(UINT8 index);
//void vLcd_Bcd_Clear(UINT8 index);
//void vLcd_Bcd_Display(UINT8 index,UINT8 BCD);
//void vLcd_String_Display(UINT8 cString[],UINT8 cLen);
//void vLcd_Flag_Display(UINT8 index,UINT8 bOpen);
//void vLcd_Flag_Clear(void);

//void vLcd_Point_Display(UINT8 index);

//void vTimer_Counter_Disp(UINT32 Time);
//void vFloat_Disp(float Count);

//void vLcd_Flag_Display_ForIsr(UINT8 index,UINT8 bOpen);
//void vLcd_Bcd_Display2(UINT8 index,UINT8 BCD, UINT8 flag);
void vLcd_Bcd_Display2(UINT8 index,UINT8 BCD);
void vLcd_String_Display2(UINT8 cString[],UINT8 cLen);
void vLcd_String_Clear2(void);
void vLcd_Flag_Display2(UINT8 u1Flag);
void vLcd_Dot_Display(UINT8 u1DotFlag);
void vLcd_All_Clear2(void);
void vLcd_All_Display2(void);	
#else
extern code UINT8 Num[26][2];
extern code UINT8 Flag[16][2];
extern code UINT8 Num_Assic[];
//Function
extern void vDelay1ms(UINT8 Count);
extern void vLcdInit(UINT8 BIAS,UINT8 DUTY,UINT8 FRM);
//extern void vLcd_Set_All(void);
//extern void vLcd_Clear_All(void);
//extern void vLcd_String_Clear(void);
//extern void vLcd_Bcd_Shift(UINT8 index);
//extern void vLcd_Bcd_Clear(UINT8 index);
//extern void vLcd_Bcd_Display(UINT8 index,UINT8 BCD);
//extern void vLcd_String_Display(UINT8 cString[],UINT8 cLen);
//extern void vLcd_Flag_Display(UINT8 index,UINT8 bOpen);
//extern void vLcd_Flag_Clear(void);
//extern void vLcd_Point_Display(UINT8 index);
//extern void vLcd_Bcd_Display1(UINT8 index,UINT8 BCD, UINT8 flag);
//extern void vTimer_Counter_Disp(UINT32 Time);
//extern void vFloat_Disp(float Count);

//extern void vLcd_Flag_Display_ForIsr(UINT8 index,UINT8 bOpen);
//extern void vLcd_Bcd_Display2(UINT8 index,UINT8 BCD, UINT8 flag);
extern void vLcd_Bcd_Display2(UINT8 index,UINT8 BCD);
extern void vLcd_String_Display2(UINT8 cString[],UINT8 cLen)	;
extern void vLcd_String_Clear2(void);
extern void vLcd_Flag_Display2(UINT8 u1Flag);
extern void vLcd_Dot_Display(UINT8 u1DotFlag);
extern void vLcd_All_Clear2(void);
extern void vLcd_All_Display2(void);
#endif
#endif



